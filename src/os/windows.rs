/* automatically generated by rust-bindgen */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]

pub const STRING_SIZE: u32 = 64;
pub type cc_uint8 = ::std::os::raw::c_uchar;
pub type cc_uint16 = ::std::os::raw::c_ushort;
pub type cc_uint32 = ::std::os::raw::c_uint;
pub type bool_ = cc_uint8;
pub type BlockID = cc_uint16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IGameComponent {
  pub Init: ::std::option::Option<unsafe extern "C" fn()>,
  pub Free: ::std::option::Option<unsafe extern "C" fn()>,
  pub Reset: ::std::option::Option<unsafe extern "C" fn()>,
  pub OnNewMap: ::std::option::Option<unsafe extern "C" fn()>,
  pub OnNewMapLoaded: ::std::option::Option<unsafe extern "C" fn()>,
  pub next: *mut IGameComponent,
}
#[test]
fn bindgen_test_layout_IGameComponent() {
  assert_eq!(
    ::std::mem::size_of::<IGameComponent>(),
    48usize,
    concat!("Size of: ", stringify!(IGameComponent))
  );
  assert_eq!(
    ::std::mem::align_of::<IGameComponent>(),
    8usize,
    concat!("Alignment of ", stringify!(IGameComponent))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IGameComponent>())).Init as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(IGameComponent),
      "::",
      stringify!(Init)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IGameComponent>())).Free as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(IGameComponent),
      "::",
      stringify!(Free)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IGameComponent>())).Reset as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(IGameComponent),
      "::",
      stringify!(Reset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IGameComponent>())).OnNewMap as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(IGameComponent),
      "::",
      stringify!(OnNewMap)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IGameComponent>())).OnNewMapLoaded as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(IGameComponent),
      "::",
      stringify!(OnNewMapLoaded)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IGameComponent>())).next as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(IGameComponent),
      "::",
      stringify!(next)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScheduledTask {
  pub Accumulator: f64,
  pub Interval: f64,
  pub Callback: ::std::option::Option<unsafe extern "C" fn(task: *mut ScheduledTask)>,
}
#[test]
fn bindgen_test_layout_ScheduledTask() {
  assert_eq!(
    ::std::mem::size_of::<ScheduledTask>(),
    24usize,
    concat!("Size of: ", stringify!(ScheduledTask))
  );
  assert_eq!(
    ::std::mem::align_of::<ScheduledTask>(),
    8usize,
    concat!("Alignment of ", stringify!(ScheduledTask))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ScheduledTask>())).Accumulator as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(ScheduledTask),
      "::",
      stringify!(Accumulator)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ScheduledTask>())).Interval as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(ScheduledTask),
      "::",
      stringify!(Interval)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ScheduledTask>())).Callback as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(ScheduledTask),
      "::",
      stringify!(Callback)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct String_ {
  pub buffer: *mut ::std::os::raw::c_char,
  pub length: cc_uint16,
  pub capacity: cc_uint16,
}
#[test]
fn bindgen_test_layout_String_() {
  assert_eq!(
    ::std::mem::size_of::<String_>(),
    16usize,
    concat!("Size of: ", stringify!(String_))
  );
  assert_eq!(
    ::std::mem::align_of::<String_>(),
    8usize,
    concat!("Alignment of ", stringify!(String_))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<String_>())).buffer as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(String_),
      "::",
      stringify!(buffer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<String_>())).length as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(String_),
      "::",
      stringify!(length)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<String_>())).capacity as *const _ as usize },
    10usize,
    concat!(
      "Offset of field: ",
      stringify!(String_),
      "::",
      stringify!(capacity)
    )
  );
}
pub type String = String_;
extern "C" {
  pub fn String_CalcLen(
    raw: *const ::std::os::raw::c_char,
    capacity: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_StripCols(str: *mut String);
}
extern "C" {
  pub fn String_Copy(dst: *mut String, src: *const String);
}
extern "C" {
  pub fn String_CopyToRaw(
    dst: *mut ::std::os::raw::c_char,
    capacity: ::std::os::raw::c_int,
    src: *const String,
  );
}
extern "C" {
  pub fn String_UNSAFE_Substring(
    str: *const String,
    offset: ::std::os::raw::c_int,
    length: ::std::os::raw::c_int,
  ) -> String;
}
extern "C" {
  pub fn String_UNSAFE_SubstringAt(str: *const String, offset: ::std::os::raw::c_int) -> String;
}
extern "C" {
  pub fn String_UNSAFE_Split(
    str: *const String,
    c: ::std::os::raw::c_char,
    subs: *mut String,
    maxSubs: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_UNSAFE_SplitBy(str: *mut String, c: ::std::os::raw::c_char, part: *mut String);
}
extern "C" {
  pub fn String_UNSAFE_Separate(
    str: *const String,
    c: ::std::os::raw::c_char,
    key: *mut String,
    value: *mut String,
  ) -> bool_;
}
extern "C" {
  pub fn String_Equals(a: *const String, b: *const String) -> bool_;
}
extern "C" {
  pub fn String_CaselessEquals(a: *const String, b: *const String) -> bool_;
}
extern "C" {
  pub fn String_CaselessEqualsConst(a: *const String, b: *const ::std::os::raw::c_char) -> bool_;
}
extern "C" {
  pub fn String_MakeUInt32(
    num: cc_uint32,
    digits: *mut ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_Append(str: *mut String, c: ::std::os::raw::c_char);
}
extern "C" {
  pub fn String_AppendBool(str: *mut String, value: bool_);
}
extern "C" {
  pub fn String_AppendInt(str: *mut String, num: ::std::os::raw::c_int);
}
extern "C" {
  pub fn String_AppendUInt32(str: *mut String, num: cc_uint32);
}
extern "C" {
  pub fn String_AppendPaddedInt(
    str: *mut String,
    num: ::std::os::raw::c_int,
    minDigits: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn String_AppendFloat(str: *mut String, num: f32, fracDigits: ::std::os::raw::c_int);
}
extern "C" {
  pub fn String_AppendConst(str: *mut String, src: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn String_AppendString(str: *mut String, src: *const String);
}
extern "C" {
  pub fn String_AppendColorless(str: *mut String, src: *const String);
}
extern "C" {
  pub fn String_AppendHex(str: *mut String, value: cc_uint8);
}
extern "C" {
  pub fn String_IndexOfAt(
    str: *const String,
    offset: ::std::os::raw::c_int,
    c: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_LastIndexOfAt(
    str: *const String,
    offset: ::std::os::raw::c_int,
    c: ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_InsertAt(
    str: *mut String,
    offset: ::std::os::raw::c_int,
    c: ::std::os::raw::c_char,
  );
}
extern "C" {
  pub fn String_DeleteAt(str: *mut String, offset: ::std::os::raw::c_int);
}
extern "C" {
  pub fn String_UNSAFE_TrimStart(str: *mut String);
}
extern "C" {
  pub fn String_UNSAFE_TrimEnd(str: *mut String);
}
extern "C" {
  pub fn String_IndexOfString(str: *const String, sub: *const String) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_CaselessContains(str: *const String, sub: *const String) -> bool_;
}
extern "C" {
  pub fn String_CaselessStarts(str: *const String, sub: *const String) -> bool_;
}
extern "C" {
  pub fn String_CaselessEnds(str: *const String, sub: *const String) -> bool_;
}
extern "C" {
  pub fn String_Compare(a: *const String, b: *const String) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn String_Format1(
    str: *mut String,
    format: *const ::std::os::raw::c_char,
    a1: *const ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn String_Format2(
    str: *mut String,
    format: *const ::std::os::raw::c_char,
    a1: *const ::std::os::raw::c_void,
    a2: *const ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn String_Format3(
    str: *mut String,
    format: *const ::std::os::raw::c_char,
    a1: *const ::std::os::raw::c_void,
    a2: *const ::std::os::raw::c_void,
    a3: *const ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn String_Format4(
    str: *mut String,
    format: *const ::std::os::raw::c_char,
    a1: *const ::std::os::raw::c_void,
    a2: *const ::std::os::raw::c_void,
    a3: *const ::std::os::raw::c_void,
    a4: *const ::std::os::raw::c_void,
  );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct StringsBuffer_ {
  pub textBuffer: *mut ::std::os::raw::c_char,
  pub flagsBuffer: *mut cc_uint32,
  pub count: ::std::os::raw::c_int,
  pub totalLength: ::std::os::raw::c_int,
  pub _textCapacity: ::std::os::raw::c_int,
  pub _flagsCapacity: ::std::os::raw::c_int,
  pub _defaultBuffer: [::std::os::raw::c_char; 4096usize],
  pub _defaultFlags: [cc_uint32; 256usize],
}
#[test]
fn bindgen_test_layout_StringsBuffer_() {
  assert_eq!(
    ::std::mem::size_of::<StringsBuffer_>(),
    5152usize,
    concat!("Size of: ", stringify!(StringsBuffer_))
  );
  assert_eq!(
    ::std::mem::align_of::<StringsBuffer_>(),
    8usize,
    concat!("Alignment of ", stringify!(StringsBuffer_))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>())).textBuffer as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(textBuffer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>())).flagsBuffer as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(flagsBuffer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>())).count as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(count)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>())).totalLength as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(totalLength)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>()))._textCapacity as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(_textCapacity)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>()))._flagsCapacity as *const _ as usize },
    28usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(_flagsCapacity)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>()))._defaultBuffer as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(_defaultBuffer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<StringsBuffer_>()))._defaultFlags as *const _ as usize },
    4128usize,
    concat!(
      "Offset of field: ",
      stringify!(StringsBuffer_),
      "::",
      stringify!(_defaultFlags)
    )
  );
}
pub type StringsBuffer = StringsBuffer_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec3_ {
  pub X: f32,
  pub Y: f32,
  pub Z: f32,
}
#[test]
fn bindgen_test_layout_Vec3_() {
  assert_eq!(
    ::std::mem::size_of::<Vec3_>(),
    12usize,
    concat!("Size of: ", stringify!(Vec3_))
  );
  assert_eq!(
    ::std::mem::align_of::<Vec3_>(),
    4usize,
    concat!("Alignment of ", stringify!(Vec3_))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Vec3_>())).X as *const _ as usize },
    0usize,
    concat!("Offset of field: ", stringify!(Vec3_), "::", stringify!(X))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Vec3_>())).Y as *const _ as usize },
    4usize,
    concat!("Offset of field: ", stringify!(Vec3_), "::", stringify!(Y))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Vec3_>())).Z as *const _ as usize },
    8usize,
    concat!("Offset of field: ", stringify!(Vec3_), "::", stringify!(Z))
  );
}
pub type Vec3 = Vec3_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IVec3_ {
  pub X: ::std::os::raw::c_int,
  pub Y: ::std::os::raw::c_int,
  pub Z: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_IVec3_() {
  assert_eq!(
    ::std::mem::size_of::<IVec3_>(),
    12usize,
    concat!("Size of: ", stringify!(IVec3_))
  );
  assert_eq!(
    ::std::mem::align_of::<IVec3_>(),
    4usize,
    concat!("Alignment of ", stringify!(IVec3_))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IVec3_>())).X as *const _ as usize },
    0usize,
    concat!("Offset of field: ", stringify!(IVec3_), "::", stringify!(X))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IVec3_>())).Y as *const _ as usize },
    4usize,
    concat!("Offset of field: ", stringify!(IVec3_), "::", stringify!(Y))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<IVec3_>())).Z as *const _ as usize },
    8usize,
    concat!("Offset of field: ", stringify!(IVec3_), "::", stringify!(Z))
  );
}
pub type IVec3 = IVec3_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Stream {
  _unused: [u8; 0],
}
pub type Event_Void_Callback =
  ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Void {
  pub Handlers: [Event_Void_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Void() {
  assert_eq!(
    ::std::mem::size_of::<Event_Void>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Void))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Void>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Void))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Void>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Void),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Void>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Void),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Void>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Void),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_Int_Callback = ::std::option::Option<
  unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void, argument: ::std::os::raw::c_int),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Int {
  pub Handlers: [Event_Int_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Int() {
  assert_eq!(
    ::std::mem::size_of::<Event_Int>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Int))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Int>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Int))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Int>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Int),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Int>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Int),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Int>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Int),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_Float_Callback =
  ::std::option::Option<unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void, argument: f32)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Float {
  pub Handlers: [Event_Float_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Float() {
  assert_eq!(
    ::std::mem::size_of::<Event_Float>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Float))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Float>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Float))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Float>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Float),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Float>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Float),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Float>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Float),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_Entry_Callback = ::std::option::Option<
  unsafe extern "C" fn(obj: *mut ::std::os::raw::c_void, stream: *mut Stream, name: *const String),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Entry {
  pub Handlers: [Event_Entry_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Entry() {
  assert_eq!(
    ::std::mem::size_of::<Event_Entry>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Entry))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Entry>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Entry))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Entry>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Entry),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Entry>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Entry),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Entry>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Entry),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_Block_Callback = ::std::option::Option<
  unsafe extern "C" fn(
    obj: *mut ::std::os::raw::c_void,
    coords: IVec3,
    oldBlock: BlockID,
    block: BlockID,
  ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Block {
  pub Handlers: [Event_Block_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Block() {
  assert_eq!(
    ::std::mem::size_of::<Event_Block>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Block))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Block>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Block))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Block>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Block),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Block>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Block),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Block>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Block),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_PointerMove_Callback = ::std::option::Option<
  unsafe extern "C" fn(
    obj: *mut ::std::os::raw::c_void,
    idx: ::std::os::raw::c_int,
    xDelta: ::std::os::raw::c_int,
    yDelta: ::std::os::raw::c_int,
  ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_PointerMove {
  pub Handlers: [Event_PointerMove_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_PointerMove() {
  assert_eq!(
    ::std::mem::size_of::<Event_PointerMove>(),
    520usize,
    concat!("Size of: ", stringify!(Event_PointerMove))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_PointerMove>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_PointerMove))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_PointerMove>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_PointerMove),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_PointerMove>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_PointerMove),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_PointerMove>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_PointerMove),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_Chat_Callback = ::std::option::Option<
  unsafe extern "C" fn(
    obj: *mut ::std::os::raw::c_void,
    msg: *const String,
    msgType: ::std::os::raw::c_int,
  ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Chat {
  pub Handlers: [Event_Chat_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Chat() {
  assert_eq!(
    ::std::mem::size_of::<Event_Chat>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Chat))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Chat>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Chat))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Chat>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Chat),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Chat>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Chat),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Chat>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Chat),
      "::",
      stringify!(Count)
    )
  );
}
pub type Event_Input_Callback = ::std::option::Option<
  unsafe extern "C" fn(
    obj: *mut ::std::os::raw::c_void,
    key: ::std::os::raw::c_int,
    repeating: bool_,
  ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Event_Input {
  pub Handlers: [Event_Input_Callback; 32usize],
  pub Objs: [*mut ::std::os::raw::c_void; 32usize],
  pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Event_Input() {
  assert_eq!(
    ::std::mem::size_of::<Event_Input>(),
    520usize,
    concat!("Size of: ", stringify!(Event_Input))
  );
  assert_eq!(
    ::std::mem::align_of::<Event_Input>(),
    8usize,
    concat!("Alignment of ", stringify!(Event_Input))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Input>())).Handlers as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Input),
      "::",
      stringify!(Handlers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Input>())).Objs as *const _ as usize },
    256usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Input),
      "::",
      stringify!(Objs)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<Event_Input>())).Count as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(Event_Input),
      "::",
      stringify!(Count)
    )
  );
}
extern "C" {
  pub fn Event_Register(
    handlers: *mut Event_Void,
    obj: *mut ::std::os::raw::c_void,
    handler: Event_Void_Callback,
  );
}
extern "C" {
  pub fn Event_Unregister(
    handlers: *mut Event_Void,
    obj: *mut ::std::os::raw::c_void,
    handler: Event_Void_Callback,
  );
}
extern "C" {
  pub fn Event_RaiseVoid(handlers: *mut Event_Void);
}
extern "C" {
  pub fn Event_RaiseInt(handlers: *mut Event_Int, arg: ::std::os::raw::c_int);
}
extern "C" {
  pub fn Event_RaiseFloat(handlers: *mut Event_Float, arg: f32);
}
extern "C" {
  pub fn Event_RaiseEntry(handlers: *mut Event_Entry, stream: *mut Stream, name: *const String);
}
extern "C" {
  pub fn Event_RaiseBlock(
    handlers: *mut Event_Block,
    coords: IVec3,
    oldBlock: BlockID,
    block: BlockID,
  );
}
extern "C" {
  pub fn Event_RaiseMove(
    handlers: *mut Event_PointerMove,
    idx: ::std::os::raw::c_int,
    xDelta: ::std::os::raw::c_int,
    yDelta: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Event_RaiseChat(
    handlers: *mut Event_Chat,
    msg: *const String,
    msgType: ::std::os::raw::c_int,
  );
}
extern "C" {
  pub fn Event_RaiseInput(handlers: *mut Event_Input, key: ::std::os::raw::c_int, repeating: bool_);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _EntityEventsList {
  pub Added: Event_Int,
  pub Removed: Event_Int,
}
#[test]
fn bindgen_test_layout__EntityEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_EntityEventsList>(),
    1040usize,
    concat!("Size of: ", stringify!(_EntityEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_EntityEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_EntityEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_EntityEventsList>())).Added as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_EntityEventsList),
      "::",
      stringify!(Added)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_EntityEventsList>())).Removed as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_EntityEventsList),
      "::",
      stringify!(Removed)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TabListEventsList {
  pub Added: Event_Int,
  pub Changed: Event_Int,
  pub Removed: Event_Int,
}
#[test]
fn bindgen_test_layout__TabListEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_TabListEventsList>(),
    1560usize,
    concat!("Size of: ", stringify!(_TabListEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_TabListEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_TabListEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TabListEventsList>())).Added as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TabListEventsList),
      "::",
      stringify!(Added)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TabListEventsList>())).Changed as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_TabListEventsList),
      "::",
      stringify!(Changed)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TabListEventsList>())).Removed as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_TabListEventsList),
      "::",
      stringify!(Removed)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TextureEventsList {
  pub AtlasChanged: Event_Void,
  pub PackChanged: Event_Void,
  pub FileChanged: Event_Entry,
}
#[test]
fn bindgen_test_layout__TextureEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_TextureEventsList>(),
    1560usize,
    concat!("Size of: ", stringify!(_TextureEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_TextureEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_TextureEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TextureEventsList>())).AtlasChanged as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TextureEventsList),
      "::",
      stringify!(AtlasChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TextureEventsList>())).PackChanged as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_TextureEventsList),
      "::",
      stringify!(PackChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TextureEventsList>())).FileChanged as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_TextureEventsList),
      "::",
      stringify!(FileChanged)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GfxEventsList {
  pub ViewDistanceChanged: Event_Void,
  pub LowVRAMDetected: Event_Void,
  pub ProjectionChanged: Event_Void,
  pub ContextLost: Event_Void,
  pub ContextRecreated: Event_Void,
}
#[test]
fn bindgen_test_layout__GfxEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_GfxEventsList>(),
    2600usize,
    concat!("Size of: ", stringify!(_GfxEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_GfxEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_GfxEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_GfxEventsList>())).ViewDistanceChanged as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_GfxEventsList),
      "::",
      stringify!(ViewDistanceChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_GfxEventsList>())).LowVRAMDetected as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_GfxEventsList),
      "::",
      stringify!(LowVRAMDetected)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_GfxEventsList>())).ProjectionChanged as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_GfxEventsList),
      "::",
      stringify!(ProjectionChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_GfxEventsList>())).ContextLost as *const _ as usize },
    1560usize,
    concat!(
      "Offset of field: ",
      stringify!(_GfxEventsList),
      "::",
      stringify!(ContextLost)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_GfxEventsList>())).ContextRecreated as *const _ as usize },
    2080usize,
    concat!(
      "Offset of field: ",
      stringify!(_GfxEventsList),
      "::",
      stringify!(ContextRecreated)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UserEventsList {
  pub BlockChanged: Event_Block,
  pub HackPermissionsChanged: Event_Void,
  pub HeldBlockChanged: Event_Void,
}
#[test]
fn bindgen_test_layout__UserEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_UserEventsList>(),
    1560usize,
    concat!("Size of: ", stringify!(_UserEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_UserEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_UserEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_UserEventsList>())).BlockChanged as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_UserEventsList),
      "::",
      stringify!(BlockChanged)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<_UserEventsList>())).HackPermissionsChanged as *const _ as usize
    },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_UserEventsList),
      "::",
      stringify!(HackPermissionsChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_UserEventsList>())).HeldBlockChanged as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_UserEventsList),
      "::",
      stringify!(HeldBlockChanged)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BlockEventsList {
  pub PermissionsChanged: Event_Void,
  pub BlockDefChanged: Event_Void,
}
#[test]
fn bindgen_test_layout__BlockEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_BlockEventsList>(),
    1040usize,
    concat!("Size of: ", stringify!(_BlockEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_BlockEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_BlockEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_BlockEventsList>())).PermissionsChanged as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_BlockEventsList),
      "::",
      stringify!(PermissionsChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_BlockEventsList>())).BlockDefChanged as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_BlockEventsList),
      "::",
      stringify!(BlockDefChanged)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WorldEventsList {
  pub NewMap: Event_Void,
  pub Loading: Event_Float,
  pub MapLoaded: Event_Void,
  pub EnvVarChanged: Event_Int,
}
#[test]
fn bindgen_test_layout__WorldEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_WorldEventsList>(),
    2080usize,
    concat!("Size of: ", stringify!(_WorldEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_WorldEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_WorldEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WorldEventsList>())).NewMap as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WorldEventsList),
      "::",
      stringify!(NewMap)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WorldEventsList>())).Loading as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_WorldEventsList),
      "::",
      stringify!(Loading)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WorldEventsList>())).MapLoaded as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_WorldEventsList),
      "::",
      stringify!(MapLoaded)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WorldEventsList>())).EnvVarChanged as *const _ as usize },
    1560usize,
    concat!(
      "Offset of field: ",
      stringify!(_WorldEventsList),
      "::",
      stringify!(EnvVarChanged)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ChatEventsList {
  pub FontChanged: Event_Void,
  pub ChatReceived: Event_Chat,
  pub ChatSending: Event_Chat,
  pub ColCodeChanged: Event_Int,
}
#[test]
fn bindgen_test_layout__ChatEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_ChatEventsList>(),
    2080usize,
    concat!("Size of: ", stringify!(_ChatEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_ChatEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_ChatEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ChatEventsList>())).FontChanged as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ChatEventsList),
      "::",
      stringify!(FontChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ChatEventsList>())).ChatReceived as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_ChatEventsList),
      "::",
      stringify!(ChatReceived)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ChatEventsList>())).ChatSending as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_ChatEventsList),
      "::",
      stringify!(ChatSending)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ChatEventsList>())).ColCodeChanged as *const _ as usize },
    1560usize,
    concat!(
      "Offset of field: ",
      stringify!(_ChatEventsList),
      "::",
      stringify!(ColCodeChanged)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _WindowEventsList {
  pub Redraw: Event_Void,
  pub Resized: Event_Void,
  pub Closing: Event_Void,
  pub FocusChanged: Event_Void,
  pub StateChanged: Event_Void,
  pub Created: Event_Void,
}
#[test]
fn bindgen_test_layout__WindowEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_WindowEventsList>(),
    3120usize,
    concat!("Size of: ", stringify!(_WindowEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_WindowEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_WindowEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WindowEventsList>())).Redraw as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_WindowEventsList),
      "::",
      stringify!(Redraw)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WindowEventsList>())).Resized as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_WindowEventsList),
      "::",
      stringify!(Resized)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WindowEventsList>())).Closing as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_WindowEventsList),
      "::",
      stringify!(Closing)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WindowEventsList>())).FocusChanged as *const _ as usize },
    1560usize,
    concat!(
      "Offset of field: ",
      stringify!(_WindowEventsList),
      "::",
      stringify!(FocusChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WindowEventsList>())).StateChanged as *const _ as usize },
    2080usize,
    concat!(
      "Offset of field: ",
      stringify!(_WindowEventsList),
      "::",
      stringify!(StateChanged)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_WindowEventsList>())).Created as *const _ as usize },
    2600usize,
    concat!(
      "Offset of field: ",
      stringify!(_WindowEventsList),
      "::",
      stringify!(Created)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _KeyEventsList {
  pub Press: Event_Int,
  pub Down: Event_Input,
  pub Up: Event_Int,
  pub Wheel: Event_Float,
}
#[test]
fn bindgen_test_layout__KeyEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_KeyEventsList>(),
    2080usize,
    concat!("Size of: ", stringify!(_KeyEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_KeyEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_KeyEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_KeyEventsList>())).Press as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_KeyEventsList),
      "::",
      stringify!(Press)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_KeyEventsList>())).Down as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_KeyEventsList),
      "::",
      stringify!(Down)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_KeyEventsList>())).Up as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_KeyEventsList),
      "::",
      stringify!(Up)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_KeyEventsList>())).Wheel as *const _ as usize },
    1560usize,
    concat!(
      "Offset of field: ",
      stringify!(_KeyEventsList),
      "::",
      stringify!(Wheel)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PointerEventsList {
  pub Moved: Event_PointerMove,
  pub Down: Event_Int,
  pub Up: Event_Int,
  pub RawMoved: Event_PointerMove,
}
#[test]
fn bindgen_test_layout__PointerEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_PointerEventsList>(),
    2080usize,
    concat!("Size of: ", stringify!(_PointerEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_PointerEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_PointerEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_PointerEventsList>())).Moved as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_PointerEventsList),
      "::",
      stringify!(Moved)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_PointerEventsList>())).Down as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_PointerEventsList),
      "::",
      stringify!(Down)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_PointerEventsList>())).Up as *const _ as usize },
    1040usize,
    concat!(
      "Offset of field: ",
      stringify!(_PointerEventsList),
      "::",
      stringify!(Up)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_PointerEventsList>())).RawMoved as *const _ as usize },
    1560usize,
    concat!(
      "Offset of field: ",
      stringify!(_PointerEventsList),
      "::",
      stringify!(RawMoved)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NetEventsList {
  pub Connected: Event_Void,
  pub Disconnected: Event_Void,
}
#[test]
fn bindgen_test_layout__NetEventsList() {
  assert_eq!(
    ::std::mem::size_of::<_NetEventsList>(),
    1040usize,
    concat!("Size of: ", stringify!(_NetEventsList))
  );
  assert_eq!(
    ::std::mem::align_of::<_NetEventsList>(),
    8usize,
    concat!("Alignment of ", stringify!(_NetEventsList))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_NetEventsList>())).Connected as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_NetEventsList),
      "::",
      stringify!(Connected)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_NetEventsList>())).Disconnected as *const _ as usize },
    520usize,
    concat!(
      "Offset of field: ",
      stringify!(_NetEventsList),
      "::",
      stringify!(Disconnected)
    )
  );
}
pub const MsgType_MSG_TYPE_NORMAL: MsgType = 0;
pub const MsgType_MSG_TYPE_STATUS_1: MsgType = 1;
pub const MsgType_MSG_TYPE_STATUS_2: MsgType = 2;
pub const MsgType_MSG_TYPE_STATUS_3: MsgType = 3;
pub const MsgType_MSG_TYPE_BOTTOMRIGHT_1: MsgType = 11;
pub const MsgType_MSG_TYPE_BOTTOMRIGHT_2: MsgType = 12;
pub const MsgType_MSG_TYPE_BOTTOMRIGHT_3: MsgType = 13;
pub const MsgType_MSG_TYPE_ANNOUNCEMENT: MsgType = 100;
pub const MsgType_MSG_TYPE_CLIENTSTATUS_1: MsgType = 256;
pub const MsgType_MSG_TYPE_CLIENTSTATUS_2: MsgType = 257;
pub type MsgType = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ChatCommand {
  pub Name: *const ::std::os::raw::c_char,
  pub Execute: ::std::option::Option<
    unsafe extern "C" fn(args: *const String, argsCount: ::std::os::raw::c_int),
  >,
  pub SingleplayerOnly: bool_,
  pub Help: [*const ::std::os::raw::c_char; 5usize],
  pub next: *mut ChatCommand,
}
#[test]
fn bindgen_test_layout_ChatCommand() {
  assert_eq!(
    ::std::mem::size_of::<ChatCommand>(),
    72usize,
    concat!("Size of: ", stringify!(ChatCommand))
  );
  assert_eq!(
    ::std::mem::align_of::<ChatCommand>(),
    8usize,
    concat!("Alignment of ", stringify!(ChatCommand))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ChatCommand>())).Name as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(ChatCommand),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ChatCommand>())).Execute as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(ChatCommand),
      "::",
      stringify!(Execute)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ChatCommand>())).SingleplayerOnly as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(ChatCommand),
      "::",
      stringify!(SingleplayerOnly)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ChatCommand>())).Help as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(ChatCommand),
      "::",
      stringify!(Help)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<ChatCommand>())).next as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(ChatCommand),
      "::",
      stringify!(next)
    )
  );
}
extern "C" {
  pub fn Commands_Register(cmd: *mut ChatCommand);
}
extern "C" {
  pub fn Chat_Send(text: *const String, logUsage: bool_);
}
extern "C" {
  pub fn Chat_Add(text: *const String);
}
extern "C" {
  pub fn Chat_AddOf(text: *const String, msgType: ::std::os::raw::c_int);
}
pub const Key__KEY_NONE: Key_ = 0;
pub const Key__KEY_F1: Key_ = 1;
pub const Key__KEY_F2: Key_ = 2;
pub const Key__KEY_F3: Key_ = 3;
pub const Key__KEY_F4: Key_ = 4;
pub const Key__KEY_F5: Key_ = 5;
pub const Key__KEY_F6: Key_ = 6;
pub const Key__KEY_F7: Key_ = 7;
pub const Key__KEY_F8: Key_ = 8;
pub const Key__KEY_F9: Key_ = 9;
pub const Key__KEY_F10: Key_ = 10;
pub const Key__KEY_F11: Key_ = 11;
pub const Key__KEY_F12: Key_ = 12;
pub const Key__KEY_F13: Key_ = 13;
pub const Key__KEY_F14: Key_ = 14;
pub const Key__KEY_F15: Key_ = 15;
pub const Key__KEY_F16: Key_ = 16;
pub const Key__KEY_F17: Key_ = 17;
pub const Key__KEY_F18: Key_ = 18;
pub const Key__KEY_F19: Key_ = 19;
pub const Key__KEY_F20: Key_ = 20;
pub const Key__KEY_F21: Key_ = 21;
pub const Key__KEY_F22: Key_ = 22;
pub const Key__KEY_F23: Key_ = 23;
pub const Key__KEY_F24: Key_ = 24;
pub const Key__KEY_F25: Key_ = 25;
pub const Key__KEY_F26: Key_ = 26;
pub const Key__KEY_F27: Key_ = 27;
pub const Key__KEY_F28: Key_ = 28;
pub const Key__KEY_F29: Key_ = 29;
pub const Key__KEY_F30: Key_ = 30;
pub const Key__KEY_F31: Key_ = 31;
pub const Key__KEY_F32: Key_ = 32;
pub const Key__KEY_F33: Key_ = 33;
pub const Key__KEY_F34: Key_ = 34;
pub const Key__KEY_F35: Key_ = 35;
pub const Key__KEY_LSHIFT: Key_ = 36;
pub const Key__KEY_RSHIFT: Key_ = 37;
pub const Key__KEY_LCTRL: Key_ = 38;
pub const Key__KEY_RCTRL: Key_ = 39;
pub const Key__KEY_LALT: Key_ = 40;
pub const Key__KEY_RALT: Key_ = 41;
pub const Key__KEY_LWIN: Key_ = 42;
pub const Key__KEY_RWIN: Key_ = 43;
pub const Key__KEY_UP: Key_ = 44;
pub const Key__KEY_DOWN: Key_ = 45;
pub const Key__KEY_LEFT: Key_ = 46;
pub const Key__KEY_RIGHT: Key_ = 47;
pub const Key__KEY_0: Key_ = 48;
pub const Key__KEY_1: Key_ = 49;
pub const Key__KEY_2: Key_ = 50;
pub const Key__KEY_3: Key_ = 51;
pub const Key__KEY_4: Key_ = 52;
pub const Key__KEY_5: Key_ = 53;
pub const Key__KEY_6: Key_ = 54;
pub const Key__KEY_7: Key_ = 55;
pub const Key__KEY_8: Key_ = 56;
pub const Key__KEY_9: Key_ = 57;
pub const Key__KEY_INSERT: Key_ = 58;
pub const Key__KEY_DELETE: Key_ = 59;
pub const Key__KEY_HOME: Key_ = 60;
pub const Key__KEY_END: Key_ = 61;
pub const Key__KEY_PAGEUP: Key_ = 62;
pub const Key__KEY_PAGEDOWN: Key_ = 63;
pub const Key__KEY_MENU: Key_ = 64;
pub const Key__KEY_A: Key_ = 65;
pub const Key__KEY_B: Key_ = 66;
pub const Key__KEY_C: Key_ = 67;
pub const Key__KEY_D: Key_ = 68;
pub const Key__KEY_E: Key_ = 69;
pub const Key__KEY_F: Key_ = 70;
pub const Key__KEY_G: Key_ = 71;
pub const Key__KEY_H: Key_ = 72;
pub const Key__KEY_I: Key_ = 73;
pub const Key__KEY_J: Key_ = 74;
pub const Key__KEY_K: Key_ = 75;
pub const Key__KEY_L: Key_ = 76;
pub const Key__KEY_M: Key_ = 77;
pub const Key__KEY_N: Key_ = 78;
pub const Key__KEY_O: Key_ = 79;
pub const Key__KEY_P: Key_ = 80;
pub const Key__KEY_Q: Key_ = 81;
pub const Key__KEY_R: Key_ = 82;
pub const Key__KEY_S: Key_ = 83;
pub const Key__KEY_T: Key_ = 84;
pub const Key__KEY_U: Key_ = 85;
pub const Key__KEY_V: Key_ = 86;
pub const Key__KEY_W: Key_ = 87;
pub const Key__KEY_X: Key_ = 88;
pub const Key__KEY_Y: Key_ = 89;
pub const Key__KEY_Z: Key_ = 90;
pub const Key__KEY_ENTER: Key_ = 91;
pub const Key__KEY_ESCAPE: Key_ = 92;
pub const Key__KEY_SPACE: Key_ = 93;
pub const Key__KEY_BACKSPACE: Key_ = 94;
pub const Key__KEY_TAB: Key_ = 95;
pub const Key__KEY_CAPSLOCK: Key_ = 96;
pub const Key__KEY_SCROLLLOCK: Key_ = 97;
pub const Key__KEY_PRINTSCREEN: Key_ = 98;
pub const Key__KEY_PAUSE: Key_ = 99;
pub const Key__KEY_NUMLOCK: Key_ = 100;
pub const Key__KEY_KP0: Key_ = 101;
pub const Key__KEY_KP1: Key_ = 102;
pub const Key__KEY_KP2: Key_ = 103;
pub const Key__KEY_KP3: Key_ = 104;
pub const Key__KEY_KP4: Key_ = 105;
pub const Key__KEY_KP5: Key_ = 106;
pub const Key__KEY_KP6: Key_ = 107;
pub const Key__KEY_KP7: Key_ = 108;
pub const Key__KEY_KP8: Key_ = 109;
pub const Key__KEY_KP9: Key_ = 110;
pub const Key__KEY_KP_DIVIDE: Key_ = 111;
pub const Key__KEY_KP_MULTIPLY: Key_ = 112;
pub const Key__KEY_KP_MINUS: Key_ = 113;
pub const Key__KEY_KP_PLUS: Key_ = 114;
pub const Key__KEY_KP_DECIMAL: Key_ = 115;
pub const Key__KEY_KP_ENTER: Key_ = 116;
pub const Key__KEY_TILDE: Key_ = 117;
pub const Key__KEY_MINUS: Key_ = 118;
pub const Key__KEY_EQUALS: Key_ = 119;
pub const Key__KEY_LBRACKET: Key_ = 120;
pub const Key__KEY_RBRACKET: Key_ = 121;
pub const Key__KEY_SLASH: Key_ = 122;
pub const Key__KEY_SEMICOLON: Key_ = 123;
pub const Key__KEY_QUOTE: Key_ = 124;
pub const Key__KEY_COMMA: Key_ = 125;
pub const Key__KEY_PERIOD: Key_ = 126;
pub const Key__KEY_BACKSLASH: Key_ = 127;
pub const Key__KEY_XBUTTON1: Key_ = 128;
pub const Key__KEY_XBUTTON2: Key_ = 129;
pub const Key__KEY_LMOUSE: Key_ = 130;
pub const Key__KEY_RMOUSE: Key_ = 131;
pub const Key__KEY_MMOUSE: Key_ = 132;
pub const Key__INPUT_COUNT: Key_ = 133;
pub type Key_ = i32;
pub type Key = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ServerConnectionData {
  pub BeginConnect: ::std::option::Option<unsafe extern "C" fn()>,
  pub Tick: ::std::option::Option<unsafe extern "C" fn(task: *mut ScheduledTask)>,
  pub SendBlock: ::std::option::Option<
    unsafe extern "C" fn(
      x: ::std::os::raw::c_int,
      y: ::std::os::raw::c_int,
      z: ::std::os::raw::c_int,
      old: BlockID,
      now: BlockID,
    ),
  >,
  pub SendChat: ::std::option::Option<unsafe extern "C" fn(text: *const String)>,
  pub SendPosition: ::std::option::Option<unsafe extern "C" fn(pos: Vec3, rotY: f32, headX: f32)>,
  pub SendData: ::std::option::Option<unsafe extern "C" fn(data: *const cc_uint8, len: cc_uint32)>,
  pub Name: String,
  pub MOTD: String,
  pub AppName: String,
  pub WriteBuffer: *mut cc_uint8,
  pub IsSinglePlayer: bool_,
  pub Disconnected: bool_,
  pub SupportsExtPlayerList: bool_,
  pub SupportsPlayerClick: bool_,
  pub SupportsPartialMessages: bool_,
  pub SupportsFullCP437: bool_,
  pub IP: String,
  pub Port: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__ServerConnectionData() {
  assert_eq!(
    ::std::mem::size_of::<_ServerConnectionData>(),
    136usize,
    concat!("Size of: ", stringify!(_ServerConnectionData))
  );
  assert_eq!(
    ::std::mem::align_of::<_ServerConnectionData>(),
    8usize,
    concat!("Alignment of ", stringify!(_ServerConnectionData))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).BeginConnect as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(BeginConnect)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).Tick as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(Tick)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).SendBlock as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SendBlock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).SendChat as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SendChat)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).SendPosition as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SendPosition)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).SendData as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SendData)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).Name as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(Name)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).MOTD as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(MOTD)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).AppName as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(AppName)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).WriteBuffer as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(WriteBuffer)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<_ServerConnectionData>())).IsSinglePlayer as *const _ as usize
    },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(IsSinglePlayer)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).Disconnected as *const _ as usize },
    105usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(Disconnected)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<_ServerConnectionData>())).SupportsExtPlayerList as *const _ as usize
    },
    106usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SupportsExtPlayerList)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<_ServerConnectionData>())).SupportsPlayerClick as *const _ as usize
    },
    107usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SupportsPlayerClick)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<_ServerConnectionData>())).SupportsPartialMessages as *const _ as usize
    },
    108usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SupportsPartialMessages)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<_ServerConnectionData>())).SupportsFullCP437 as *const _ as usize
    },
    109usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(SupportsFullCP437)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).IP as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(IP)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_ServerConnectionData>())).Port as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_ServerConnectionData),
      "::",
      stringify!(Port)
    )
  );
}
extern "C" {
  pub fn Options_Get(
    key: *const ::std::os::raw::c_char,
    value: *mut String,
    defValue: *const ::std::os::raw::c_char,
  );
}
extern "C" {
  pub fn Options_GetInt(
    key: *const ::std::os::raw::c_char,
    min: ::std::os::raw::c_int,
    max: ::std::os::raw::c_int,
    defValue: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Options_GetBool(key: *const ::std::os::raw::c_char, defValue: bool_) -> bool_;
}
extern "C" {
  pub fn Options_GetFloat(
    key: *const ::std::os::raw::c_char,
    min: f32,
    max: f32,
    defValue: f32,
  ) -> f32;
}
extern "C" {
  pub fn Options_GetEnum(
    key: *const ::std::os::raw::c_char,
    defValue: ::std::os::raw::c_int,
    names: *const *const ::std::os::raw::c_char,
    namesCount: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn Options_SetBool(keyRaw: *const ::std::os::raw::c_char, value: bool_);
}
extern "C" {
  pub fn Options_SetInt(keyRaw: *const ::std::os::raw::c_char, value: ::std::os::raw::c_int);
}
extern "C" {
  pub fn Options_Set(keyRaw: *const ::std::os::raw::c_char, value: *const String);
}
extern "C" {
  pub fn Options_SetString(key: *const String, value: *const String);
}
extern "C" {
  pub fn Options_Load();
}
extern "C" {
  pub fn Options_Save();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _TabListData {
  pub NameOffsets: [cc_uint16; 256usize],
  pub GroupRanks: [cc_uint8; 256usize],
  pub _buffer: StringsBuffer,
}
#[test]
fn bindgen_test_layout__TabListData() {
  assert_eq!(
    ::std::mem::size_of::<_TabListData>(),
    5920usize,
    concat!("Size of: ", stringify!(_TabListData))
  );
  assert_eq!(
    ::std::mem::align_of::<_TabListData>(),
    8usize,
    concat!("Alignment of ", stringify!(_TabListData))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TabListData>())).NameOffsets as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_TabListData),
      "::",
      stringify!(NameOffsets)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TabListData>())).GroupRanks as *const _ as usize },
    512usize,
    concat!(
      "Offset of field: ",
      stringify!(_TabListData),
      "::",
      stringify!(GroupRanks)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_TabListData>()))._buffer as *const _ as usize },
    768usize,
    concat!(
      "Offset of field: ",
      stringify!(_TabListData),
      "::",
      stringify!(_buffer)
    )
  );
}
